SET search_path = public,pg_catalog,web,account,stats;

CREATE TABLE IF NOT EXISTS public.mojo_migrations
(
    name    text   NOT NULL,
    version bigint NOT NULL,
    CONSTRAINT mojo_migrations_version_check CHECK ((version >= 0)),
    CONSTRAINT mojo_migrations_pkey PRIMARY KEY (name)

);
ALTER TABLE public.mojo_migrations
    OWNER TO samizdat;

CREATE SCHEMA IF NOT EXISTS web;
ALTER SCHEMA web OWNER TO samizdat;

CREATE SCHEMA IF NOT EXISTS account;
ALTER SCHEMA account OWNER TO samizdat;

CREATE TYPE public."position" AS
    ENUM ('current','next','previous');
ALTER TYPE public."position" OWNER TO samizdat;

CREATE TABLE IF NOT EXISTS account.contact
(
    id           integer           NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT BY 1 MINVALUE 1 MAXVALUE 2147483647 START WITH 1 CACHE 1 ),
    email        character varying NOT NULL,
    givenname    character varying,
    commonname   character varying,
    displayname  character varying NOT NULL DEFAULT '',
    organization character varying,
    address      character varying,
    pc           character varying,
    city         character(63),
    telephone    character varying(31),
    mobile       character varying(31),
    website      character varying,
    dob          date,
    countryid    integer,
    languageid   integer           NOT NULL,
    stateid      integer,
    orgnoid      integer,
    CONSTRAINT contactname_pk PRIMARY KEY (id)

);
ALTER TABLE account.contact
    OWNER TO samizdat;

CREATE TABLE IF NOT EXISTS account.password
(
    id               integer                  NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT BY 1 MINVALUE 1 MAXVALUE 2147483647 START WITH 1 CACHE 1 ),
    passwordmysql    character varying,
    passwordsha512   character varying,
    passwordpbkdf2   character varying,
    passwordbcrypt   character varying,
    passwordargon2id character varying,
    changed          timestamp with time zone NOT NULL DEFAULT now(),
    userid           integer                  NOT NULL,
    CONSTRAINT password_pk PRIMARY KEY (id),
    CONSTRAINT password_userid_uq UNIQUE (userid)

);
ALTER TABLE account.password
    OWNER TO samizdat;

CREATE TABLE IF NOT EXISTS account.role
(
    id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT BY 1 MINVALUE 1 MAXVALUE 2147483647 START WITH 1 CACHE 1 ),
    CONSTRAINT role_pk PRIMARY KEY (id)

);
ALTER TABLE account.role
    OWNER TO samizdat;

CREATE TABLE IF NOT EXISTS web.resource
(
    id            integer                  NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT BY 1 MINVALUE 1 MAXVALUE 2147483647 START WITH 1 CACHE 1 ),
    alias         character varying        NOT NULL DEFAULT '',
    title         character varying(191)   NOT NULL DEFAULT '',
    description   character varying        NOT NULL DEFAULT '',
    content       text                     NOT NULL DEFAULT '',
    owner         integer                  NOT NULL,
    creator       integer,
    publisher     integer,
    parent        integer,
    resourcealias integer,
    contenttype   integer                  NOT NULL DEFAULT 1,
    languageid    integer                  NOT NULL,
    created       timestamp with time zone NOT NULL DEFAULT now(),
    modified      timestamp with time zone NOT NULL DEFAULT now(),
    published     timestamp with time zone,
    comments      integer                  NOT NULL DEFAULT 0,
    templateid    integer                  NOT NULL,
    CONSTRAINT resource_pk PRIMARY KEY (id)

);
ALTER TABLE web.resource
    OWNER TO samizdat;

CREATE TABLE IF NOT EXISTS web.menuitem
(
    id         integer                NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT BY 1 MINVALUE 1 MAXVALUE 2147483647 START WITH 1 CACHE 1 ),
    title      character varying(191) NOT NULL DEFAULT '',
    parent     integer                         DEFAULT 0,
    "position" smallint               NOT NULL DEFAULT 0,
    uriid      integer,
    menuid     integer                NOT NULL,
    children   integer                NOT NULL DEFAULT 0,
    CONSTRAINT menuitem_pk PRIMARY KEY (id)

);
ALTER TABLE web.menuitem
    OWNER TO samizdat;

CREATE TABLE IF NOT EXISTS web.contenttype
(
    id       integer               NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT BY 1 MINVALUE 1 MAXVALUE 2147483647 START WITH 1 CACHE 1 ),
    name     character varying     NOT NULL,
    mimetype character varying(31) NOT NULL,
    CONSTRAINT contenttype_pk PRIMARY KEY (id),
    CONSTRAINT contenttype_mimetype_uq UNIQUE (mimetype)

);
ALTER TABLE web.contenttype
    OWNER TO samizdat;

CREATE TABLE IF NOT EXISTS web.comment
(
    id         integer                  NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT BY 1 MINVALUE 1 MAXVALUE 2147483647 START WITH 1 CACHE 1 ),
    parent     integer,
    resourceid integer                  NOT NULL,
    created    timestamp with time zone NOT NULL DEFAULT now(),
    CONSTRAINT comment_pk PRIMARY KEY (id)

);
ALTER TABLE web.comment
    OWNER TO samizdat;

CREATE TABLE IF NOT EXISTS web.menu
(
    id   integer           NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT BY 1 MINVALUE 1 MAXVALUE 2147483647 START WITH 1 CACHE 1 ),
    name character varying NOT NULL DEFAULT '',
    CONSTRAINT menu_pk PRIMARY KEY (id),
    CONSTRAINT menu_name_uq UNIQUE (name)

);
ALTER TABLE web.menu
    OWNER TO samizdat;

CREATE TABLE IF NOT EXISTS web.uri
(
    id         integer           NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT BY 1 MINVALUE 1 MAXVALUE 2147483647 START WITH 1 CACHE 1 ),
    path       character varying NOT NULL DEFAULT '',
    resourceid integer,
    CONSTRAINT uri_pk PRIMARY KEY (id),
    CONSTRAINT uri_path_uq UNIQUE (path)

);
ALTER TABLE web.uri
    OWNER TO samizdat;

CREATE TABLE IF NOT EXISTS account.message
(
    id          integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT BY 1 MINVALUE 1 MAXVALUE 2147483647 START WITH 1 CACHE 1 ),
    recipientid integer NOT NULL,
    senderid    integer,
    contents    jsonb   NOT NULL,
    viewed      boolean NOT NULL         DEFAULT false,
    created     timestamp with time zone DEFAULT now(),
    modified    timestamp with time zone,
    CONSTRAINT message_pk PRIMARY KEY (id)

);
ALTER TABLE account.message
    OWNER TO samizdat;

CREATE TABLE IF NOT EXISTS account.userban
(
    id     integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT BY 1 MINVALUE 1 MAXVALUE 2147483647 START WITH 1 CACHE 1 ),
    banner integer NOT NULL,
    banned integer NOT NULL,
    CONSTRAINT userban_pk PRIMARY KEY (id)

);
ALTER TABLE account.userban
    OWNER TO samizdat;

CREATE TABLE IF NOT EXISTS web.context
(
    id   integer           NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT BY 1 MINVALUE 1 MAXVALUE 2147483647 START WITH 1 CACHE 1 ),
    name character varying NOT NULL,
    CONSTRAINT context_pk PRIMARY KEY (id),
    CONSTRAINT context_name_uq UNIQUE (name)

);
ALTER TABLE web.context
    OWNER TO samizdat;

CREATE TABLE IF NOT EXISTS public.country
(
    id          integer              NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT BY 1 MINVALUE 1 MAXVALUE 2147483647 START WITH 1 CACHE 1 ),
    cc          character varying(3) NOT NULL,
    pcformat    character varying,
    pcregex     character varying,
    svgflag     character varying,
    geonameid   integer,
    tld         character varying,
    phone       character varying,
    continentid integer              NOT NULL,
    CONSTRAINT country_pk PRIMARY KEY (id),
    CONSTRAINT country_cc_uq UNIQUE (cc)

);
ALTER TABLE public.country
    OWNER TO samizdat;

CREATE TABLE IF NOT EXISTS public.vatrate
(
    id        integer          NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT BY 1 MINVALUE 1 MAXVALUE 2147483647 START WITH 1 CACHE 1 ),
    rate      double precision NOT NULL DEFAULT 0.00,
    countryid integer          NOT NULL,
    CONSTRAINT vatdata_pk PRIMARY KEY (id)

);
ALTER TABLE public.vatrate
    OWNER TO samizdat;

CREATE TABLE IF NOT EXISTS public.state
(
    id        integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT BY 1 MINVALUE 1 MAXVALUE 2147483647 START WITH 1 CACHE 1 ),
    countryid integer NOT NULL,
    CONSTRAINT state_pk PRIMARY KEY (id)

);
ALTER TABLE public.state
    OWNER TO samizdat;

CREATE TABLE IF NOT EXISTS account.loginfailure
(
    id          integer                  NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT BY 1 MINVALUE 1 MAXVALUE 2147483647 START WITH 1 CACHE 1 ),
    ip          inet                     NOT NULL,
    username    character varying(31)    NOT NULL DEFAULT '',
    failuretime timestamp with time zone NOT NULL DEFAULT now(),
    CONSTRAINT loginfailure_pk PRIMARY KEY (id)

);
ALTER TABLE account.loginfailure
    OWNER TO samizdat;

CREATE INDEX ip_ix ON account.loginfailure
    USING btree
    (
     ip
        )
    WITH (FILLFACTOR = 90);

CREATE TABLE IF NOT EXISTS public.language
(
    id   integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT BY 1 MINVALUE 1 MAXVALUE 2147483647 START WITH 1 CACHE 1 ),
    code character varying,
    CONSTRAINT language_pk PRIMARY KEY (id)

);
ALTER TABLE public.language
    OWNER TO samizdat;

CREATE TABLE IF NOT EXISTS public.languagename
(
    id           integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT BY 1 MINVALUE 1 MAXVALUE 2147483647 START WITH 1 CACHE 1 ),
    languagename character varying,
    languageid   integer NOT NULL,
    CONSTRAINT languagename_pk PRIMARY KEY (id)

);
ALTER TABLE public.languagename
    OWNER TO samizdat;

CREATE TABLE IF NOT EXISTS public.countryname
(
    id          integer           NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT BY 1 MINVALUE 1 MAXVALUE 2147483647 START WITH 1 CACHE 1 ),
    countryname character varying NOT NULL,
    languageid  integer           NOT NULL,
    countryid   integer           NOT NULL,
    CONSTRAINT countryname_pk PRIMARY KEY (id)

);
ALTER TABLE public.countryname
    OWNER TO samizdat;

CREATE TABLE IF NOT EXISTS public.statename
(
    id         integer           NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT BY 1 MINVALUE 1 MAXVALUE 2147483647 START WITH 1 CACHE 1 ),
    statename  character varying NOT NULL,
    stateid    integer           NOT NULL,
    languageid integer           NOT NULL,
    CONSTRAINT statename_pk PRIMARY KEY (id)

);
ALTER TABLE public.statename
    OWNER TO samizdat;

CREATE TABLE IF NOT EXISTS account."user"
(
    id         integer               NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT BY 1 MINVALUE 1 MAXVALUE 2147483647 START WITH 1 CACHE 1 ),
    username   character varying(31) NOT NULL,
    deleted    boolean               NOT NULL DEFAULT false,
    blocked    boolean               NOT NULL DEFAULT false,
    activated  boolean               NOT NULL DEFAULT false,
    created    timestamp with time zone       DEFAULT now(),
    modified   timestamp with time zone,
    controlled boolean               NOT NULL DEFAULT false,
    contactid  integer               NOT NULL,
    CONSTRAINT user_pk PRIMARY KEY (id),
    CONSTRAINT user_username_uq UNIQUE (username),
    CONSTRAINT user_contactid_uq UNIQUE (contactid)

);
ALTER TABLE account."user"
    OWNER TO samizdat;

CREATE TABLE IF NOT EXISTS public.languagevariant
(
    id         integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT BY 1 MINVALUE 1 MAXVALUE 2147483647 START WITH 1 CACHE 1 ),
    variant    character varying,
    languageid integer NOT NULL,
    CONSTRAINT languagevariant_pk PRIMARY KEY (id)

);
ALTER TABLE public.languagevariant
    OWNER TO samizdat;

CREATE TABLE IF NOT EXISTS web.setting
(
    id    integer           NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT BY 1 MINVALUE 1 MAXVALUE 2147483647 START WITH 1 CACHE 1 ),
    key   character varying NOT NULL,
    value character varying NOT NULL,
    CONSTRAINT setting_pk PRIMARY KEY (id),
    CONSTRAINT setting_key_uq UNIQUE (key)

);
ALTER TABLE web.setting
    OWNER TO samizdat;

CREATE TABLE IF NOT EXISTS account.login
(
    id        integer                  NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT BY 1 MINVALUE 1 MAXVALUE 2147483647 START WITH 1 CACHE 1 ),
    userid    integer                  NOT NULL,
    logintime timestamp with time zone NOT NULL DEFAULT now(),
    active    boolean                  NOT NULL DEFAULT true,
    ip        inet                     NOT NULL,
    CONSTRAINT login_pk PRIMARY KEY (id)

);
ALTER TABLE account.login
    OWNER TO samizdat;

CREATE TABLE IF NOT EXISTS public.exchangerate
(
    id         integer                  NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT BY 1 MINVALUE 1 MAXVALUE 2147483647 START WITH 1 CACHE 1 ),
    currencyid integer                  NOT NULL,
    rate       numeric(4, 0)            NOT NULL,
    ratedate   timestamp with time zone NOT NULL DEFAULT now(),
    CONSTRAINT exchangerate_pk PRIMARY KEY (id)

);
ALTER TABLE public.exchangerate
    OWNER TO samizdat;

CREATE TABLE IF NOT EXISTS public.currency
(
    id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT BY 1 MINVALUE 1 MAXVALUE 2147483647 START WITH 1 CACHE 1 ),
    CONSTRAINT currency_pk PRIMARY KEY (id)

);
ALTER TABLE public.currency
    OWNER TO samizdat;

CREATE TABLE IF NOT EXISTS public.currencyname
(
    id         integer               NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT BY 1 MINVALUE 1 MAXVALUE 2147483647 START WITH 1 CACHE 1 ),
    name       character varying(15) NOT NULL,
    languageid integer               NOT NULL,
    currencyid integer               NOT NULL,
    format     character varying(31),
    CONSTRAINT currencyname_pk PRIMARY KEY (id)

);
ALTER TABLE public.currencyname
    OWNER TO samizdat;

CREATE TABLE IF NOT EXISTS public.addressformat
(
    id        integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT BY 1 MINVALUE 1 MAXVALUE 2147483647 START WITH 1 CACHE 1 ),
    format    character varying(255),
    countryid integer NOT NULL,
    CONSTRAINT addressformat_pk PRIMARY KEY (id)

);
ALTER TABLE public.addressformat
    OWNER TO samizdat;

CREATE TABLE IF NOT EXISTS account.rolename
(
    id         integer           NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT BY 1 MINVALUE 1 MAXVALUE 2147483647 START WITH 1 CACHE 1 ),
    name       character varying NOT NULL DEFAULT '',
    languageid integer           NOT NULL,
    roleid     integer           NOT NULL,
    CONSTRAINT rolename_pk PRIMARY KEY (id)

);
ALTER TABLE account.rolename
    OWNER TO samizdat;

CREATE TABLE IF NOT EXISTS account.roleuser
(
    id     integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT BY 1 MINVALUE 1 MAXVALUE 2147483647 START WITH 1 CACHE 1 ),
    roleid integer NOT NULL,
    userid integer NOT NULL,
    CONSTRAINT roleuser_pk PRIMARY KEY (id)

);
ALTER TABLE account.roleuser
    OWNER TO samizdat;

CREATE TABLE IF NOT EXISTS account.presentation
(
    id           integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT BY 1 MINVALUE 1 MAXVALUE 2147483647 START WITH 1 CACHE 1 ),
    presentation character(1),
    userid       integer NOT NULL,
    languageid   integer NOT NULL,
    CONSTRAINT presentation_pk PRIMARY KEY (id)

);
ALTER TABLE account.presentation
    OWNER TO samizdat;

CREATE TABLE IF NOT EXISTS account.image
(
    id           integer     NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT BY 1 MINVALUE 1 MAXVALUE 2147483647 START WITH 1 CACHE 1 ),
    profileimage bit varying NOT NULL,
    userid       integer     NOT NULL,
    filename     character varying,
    CONSTRAINT image_pk PRIMARY KEY (id),
    CONSTRAINT image_userid_uq UNIQUE (userid)

);
ALTER TABLE account.image
    OWNER TO samizdat;

CREATE TABLE IF NOT EXISTS web.template
(
    id   integer           NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT BY 1 MINVALUE 1 MAXVALUE 2147483647 START WITH 1 CACHE 1 ),
    path character varying NOT NULL DEFAULT 'templates/default.html.ep',
    CONSTRAINT template_pk PRIMARY KEY (id),
    CONSTRAINT template_path_uq UNIQUE (path)

);
ALTER TABLE web.template
    OWNER TO samizdat;

CREATE TABLE IF NOT EXISTS account.displayfield
(
    id           integer             NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT BY 1 MINVALUE 1 MAXVALUE 2147483647 START WITH 1 CACHE 1 ),
    fieldnames   character varying[] NOT NULL,
    displaylevel smallint            NOT NULL DEFAULT 0,
    userid       integer             NOT NULL,
    CONSTRAINT displayfield_pk PRIMARY KEY (id)

);
ALTER TABLE account.displayfield
    OWNER TO samizdat;

CREATE TABLE IF NOT EXISTS account."group"
(
    id        integer           NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT BY 1 MINVALUE 1 MAXVALUE 2147483647 START WITH 1 CACHE 1 ),
    groupname character varying NOT NULL,
    creator   integer,
    updater   integer,
    CONSTRAINT group_pk PRIMARY KEY (id),
    CONSTRAINT group_groupname_uq UNIQUE (groupname)

);
ALTER TABLE account."group"
    OWNER TO samizdat;

CREATE TABLE IF NOT EXISTS account.usergroup
(
    id      integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT BY 1 MINVALUE 1 MAXVALUE 2147483647 START WITH 1 CACHE 1 ),
    userid  integer NOT NULL,
    groupid integer NOT NULL,
    CONSTRAINT usergroup_pk PRIMARY KEY (id)

);
ALTER TABLE account.usergroup
    OWNER TO samizdat;

CREATE TABLE IF NOT EXISTS public.continent
(
    id        integer           NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT BY 1 MINVALUE 1 MAXVALUE 2147483647 START WITH 1 CACHE 1 ),
    continent character varying NOT NULL,
    code      character varying NOT NULL,
    CONSTRAINT continent_pk PRIMARY KEY (id)

);
ALTER TABLE public.continent
    OWNER TO samizdat;

CREATE SCHEMA IF NOT EXISTS stats;
ALTER SCHEMA stats OWNER TO samizdat;

CREATE TABLE IF NOT EXISTS stats.counter
(
    id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    CONSTRAINT counter_pk PRIMARY KEY (id)

);
ALTER TABLE stats.counter
    OWNER TO samizdat;

CREATE TABLE IF NOT EXISTS stats.referrer
(
    id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    CONSTRAINT referrer_pk PRIMARY KEY (id)

);
ALTER TABLE stats.referrer
    OWNER TO samizdat;

CREATE TABLE IF NOT EXISTS stats.visitcache
(
    id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    CONSTRAINT visitcache_pk PRIMARY KEY (id)

);
ALTER TABLE stats.visitcache
    OWNER TO samizdat;


ALTER TABLE web.comment
    ADD CONSTRAINT resource_fk FOREIGN KEY (resourceid)
        REFERENCES web.resource (id) MATCH FULL
        ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE web.uri
    ADD CONSTRAINT resource_fk FOREIGN KEY (resourceid)
        REFERENCES web.resource (id) MATCH FULL
        ON DELETE SET NULL ON UPDATE CASCADE;

ALTER TABLE web.menuitem
    ADD CONSTRAINT uri_fk FOREIGN KEY (uriid)
        REFERENCES web.uri (id) MATCH FULL
        ON DELETE SET NULL ON UPDATE CASCADE;

ALTER TABLE public.state
    ADD CONSTRAINT country_fk FOREIGN KEY (countryid)
        REFERENCES public.country (id) MATCH FULL
        ON DELETE RESTRICT ON UPDATE CASCADE;

ALTER TABLE public.vatrate
    ADD CONSTRAINT country_fk FOREIGN KEY (countryid)
        REFERENCES public.country (id) MATCH FULL
        ON DELETE RESTRICT ON UPDATE CASCADE;

ALTER TABLE public.countryname
    ADD CONSTRAINT country_fk FOREIGN KEY (countryid)
        REFERENCES public.country (id) MATCH FULL
        ON DELETE RESTRICT ON UPDATE CASCADE;

ALTER TABLE public.statename
    ADD CONSTRAINT state_fk FOREIGN KEY (stateid)
        REFERENCES public.state (id) MATCH FULL
        ON DELETE RESTRICT ON UPDATE CASCADE;

ALTER TABLE public.languagename
    ADD CONSTRAINT language_fk FOREIGN KEY (languageid)
        REFERENCES public.language (id) MATCH FULL
        ON DELETE RESTRICT ON UPDATE CASCADE;

ALTER TABLE public.statename
    ADD CONSTRAINT language_fk FOREIGN KEY (languageid)
        REFERENCES public.language (id) MATCH FULL
        ON DELETE RESTRICT ON UPDATE CASCADE;

ALTER TABLE public.countryname
    ADD CONSTRAINT language_fk FOREIGN KEY (languageid)
        REFERENCES public.language (id) MATCH FULL
        ON DELETE RESTRICT ON UPDATE CASCADE;

ALTER TABLE account.password
    ADD CONSTRAINT user_fk FOREIGN KEY (userid)
        REFERENCES account."user" (id) MATCH FULL
        ON DELETE RESTRICT ON UPDATE CASCADE;

ALTER TABLE account.login
    ADD CONSTRAINT user_fk FOREIGN KEY (userid)
        REFERENCES account."user" (id) MATCH FULL
        ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE public.languagevariant
    ADD CONSTRAINT language_fk FOREIGN KEY (languageid)
        REFERENCES public.language (id) MATCH FULL
        ON DELETE RESTRICT ON UPDATE CASCADE;

ALTER TABLE public.exchangerate
    ADD CONSTRAINT currency_fk FOREIGN KEY (currencyid)
        REFERENCES public.currency (id) MATCH FULL
        ON DELETE RESTRICT ON UPDATE CASCADE;

ALTER TABLE public.currencyname
    ADD CONSTRAINT language_fk FOREIGN KEY (languageid)
        REFERENCES public.language (id) MATCH FULL
        ON DELETE RESTRICT ON UPDATE CASCADE;

ALTER TABLE public.currencyname
    ADD CONSTRAINT currency_fk FOREIGN KEY (currencyid)
        REFERENCES public.currency (id) MATCH FULL
        ON DELETE RESTRICT ON UPDATE CASCADE;

ALTER TABLE public.addressformat
    ADD CONSTRAINT country_fk FOREIGN KEY (countryid)
        REFERENCES public.country (id) MATCH FULL
        ON DELETE RESTRICT ON UPDATE CASCADE;

ALTER TABLE web.resource
    ADD CONSTRAINT language_fk FOREIGN KEY (languageid)
        REFERENCES public.language (id) MATCH FULL
        ON DELETE RESTRICT ON UPDATE CASCADE;

ALTER TABLE web.menuitem
    ADD CONSTRAINT menu_fk FOREIGN KEY (menuid)
        REFERENCES web.menu (id) MATCH FULL
        ON DELETE RESTRICT ON UPDATE CASCADE;

ALTER TABLE account.rolename
    ADD CONSTRAINT language_fk FOREIGN KEY (languageid)
        REFERENCES public.language (id) MATCH FULL
        ON DELETE RESTRICT ON UPDATE CASCADE;

ALTER TABLE account.rolename
    ADD CONSTRAINT role_fk FOREIGN KEY (roleid)
        REFERENCES account.role (id) MATCH FULL
        ON DELETE RESTRICT ON UPDATE CASCADE;

ALTER TABLE account.roleuser
    ADD CONSTRAINT role_fk FOREIGN KEY (roleid)
        REFERENCES account.role (id) MATCH FULL
        ON DELETE RESTRICT ON UPDATE CASCADE;

ALTER TABLE account.roleuser
    ADD CONSTRAINT user_fk FOREIGN KEY (userid)
        REFERENCES account."user" (id) MATCH FULL
        ON DELETE RESTRICT ON UPDATE CASCADE;

ALTER TABLE account.presentation
    ADD CONSTRAINT user_fk FOREIGN KEY (userid)
        REFERENCES account."user" (id) MATCH FULL
        ON DELETE RESTRICT ON UPDATE CASCADE;

ALTER TABLE account.presentation
    ADD CONSTRAINT language_fk FOREIGN KEY (languageid)
        REFERENCES public.language (id) MATCH FULL
        ON DELETE RESTRICT ON UPDATE CASCADE;

ALTER TABLE account.image
    ADD CONSTRAINT user_fk FOREIGN KEY (userid)
        REFERENCES account."user" (id) MATCH FULL
        ON DELETE RESTRICT ON UPDATE CASCADE;

ALTER TABLE web.resource
    ADD CONSTRAINT template_fk FOREIGN KEY (templateid)
        REFERENCES web.template (id) MATCH FULL
        ON DELETE RESTRICT ON UPDATE RESTRICT;

ALTER TABLE account.displayfield
    ADD CONSTRAINT user_fk FOREIGN KEY (userid)
        REFERENCES account."user" (id) MATCH FULL
        ON DELETE RESTRICT ON UPDATE CASCADE;

ALTER TABLE account."user"
    ADD CONSTRAINT contact_fk FOREIGN KEY (contactid)
        REFERENCES account.contact (id) MATCH FULL
        ON DELETE RESTRICT ON UPDATE CASCADE;

ALTER TABLE public.country
    ADD CONSTRAINT continent_fk FOREIGN KEY (continentid)
        REFERENCES public.continent (id) MATCH FULL
        ON DELETE RESTRICT ON UPDATE CASCADE;

ALTER TABLE account.contact
    ADD CONSTRAINT language_fk FOREIGN KEY (languageid)
        REFERENCES public.language (id) MATCH FULL
        ON DELETE RESTRICT ON UPDATE CASCADE;

ALTER TABLE account.contact
    ADD CONSTRAINT country_fk FOREIGN KEY (countryid)
        REFERENCES public.country (id) MATCH FULL
        ON DELETE SET NULL ON UPDATE CASCADE;

ALTER TABLE account.contact
    ADD CONSTRAINT state_fk FOREIGN KEY (stateid)
        REFERENCES public.state (id) MATCH FULL
        ON DELETE NO ACTION ON UPDATE CASCADE;

ALTER TABLE web.resource
    ADD CONSTRAINT parent_fk FOREIGN KEY (parent)
        REFERENCES web.resource (id) MATCH FULL
        ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE web.resource
    ADD CONSTRAINT resourcealias_fk FOREIGN KEY (resourcealias)
        REFERENCES web.resource (id) MATCH FULL
        ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE web.resource
    ADD CONSTRAINT contenttype_fk FOREIGN KEY (contenttype)
        REFERENCES web.contenttype (id) MATCH FULL
        ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE web.resource
    ADD CONSTRAINT owner_fk FOREIGN KEY (owner)
        REFERENCES account."user" (id) MATCH FULL
        ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE web.resource
    ADD CONSTRAINT creator_fk FOREIGN KEY (creator)
        REFERENCES account."user" (id) MATCH FULL
        ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE web.resource
    ADD CONSTRAINT publisher_fk FOREIGN KEY (publisher)
        REFERENCES account."user" (id) MATCH FULL
        ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE web.menuitem
    ADD CONSTRAINT parent_fk FOREIGN KEY (parent)
        REFERENCES web.menuitem (id) MATCH FULL
        ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE web.comment
    ADD CONSTRAINT parent_fk FOREIGN KEY (parent)
        REFERENCES web.comment (id) MATCH FULL
        ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE account.message
    ADD CONSTRAINT recipient_fk FOREIGN KEY (recipientid)
        REFERENCES account."user" (id) MATCH FULL
        ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE account.message
    ADD CONSTRAINT sender_fk FOREIGN KEY (senderid)
        REFERENCES account."user" (id) MATCH FULL
        ON DELETE NO ACTION ON UPDATE CASCADE;

ALTER TABLE account.userban
    ADD CONSTRAINT banner_id FOREIGN KEY (banner)
        REFERENCES account."user" (id) MATCH FULL
        ON DELETE CASCADE ON UPDATE NO ACTION;

ALTER TABLE account.userban
    ADD CONSTRAINT banned_id FOREIGN KEY (banned)
        REFERENCES account."user" (id) MATCH FULL
        ON DELETE CASCADE ON UPDATE NO ACTION;

ALTER TABLE account."group"
    ADD CONSTRAINT creator_fk FOREIGN KEY (creator)
        REFERENCES account."user" (id) MATCH FULL
        ON DELETE SET NULL ON UPDATE NO ACTION;

ALTER TABLE account."group"
    ADD CONSTRAINT updater_fk FOREIGN KEY (updater)
        REFERENCES account."user" (id) MATCH FULL
        ON DELETE SET NULL ON UPDATE NO ACTION;

ALTER TABLE account.usergroup
    ADD CONSTRAINT user_fk FOREIGN KEY (userid)
        REFERENCES account."user" (id) MATCH FULL
        ON DELETE CASCADE ON UPDATE NO ACTION;

ALTER TABLE account.usergroup
    ADD CONSTRAINT group_fk FOREIGN KEY (groupid)
        REFERENCES account."group" (id) MATCH FULL
        ON DELETE CASCADE ON UPDATE NO ACTION;