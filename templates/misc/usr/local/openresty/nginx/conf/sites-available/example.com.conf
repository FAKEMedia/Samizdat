map $cookie_language $lang_suffix {
  default "";  # Default/fallback when no cookie or unrecognized language
  en "";       # English is the default language with no suffix
  sv ".sv";    # Swedish
  de ".de";    # German
  es ".es";    # Spanish
  fr ".fr";    # French
  ru ".ru";    # Russian
  pl ".pl";    # Polish
  pt ".pt";    # Portuguese
  ar ".ar";    # Arabic
  hi ".hi";    # Hindi
  zh ".zh";    # Mandarin
}

upstream samizdat {
  server unix:/sites/Samizdat/bin/samizdat.sock;
}

upstream php-fpm {
  server unix:/var/run/php/php-fpm.sock;
}

server {
  listen 5.178.75.155:443 ssl;
  listen 5.178.75.155:8443 quic reuseport;
  listen 5.178.75.155:8443 ssl;
  listen [2a02:750:9::6da]:443 ssl;
  listen [2a02:750:9::6da]:8443 quic reuseport;
  listen [2a02:750:9::6da]:8443 ssl;
  http2 on;
  add_header Alt-Svc 'h3=":8443"; ma=86400';

  server_name fakenews.com www.fakenews.com;
  include snippets/ssl-fakenews.com;
  include snippets/ssl-params;
  charset utf-8;
  root /sites/Samizdat/public;
  index index.html;
  default_type text/html;
  access_log /var/log/nginx/samizdat.access.log combined buffer=64k flush=5m;
  error_log /var/log/nginx/samizdat.error.log;
  error_page 500 503 504  /50x.html;

  location = /50x.html { root /usr/local/openresty/nginx/html; }
#	location ~* < { return 301 https://www.fakenews.com/; }
  location / {
    add_header Vary Accept-Encoding;
    disable_symlinks on;
    gzip_static on;
    gunzip on;
    gzip on;
    gzip_vary on;
    gzip_proxied expired no-cache no-store private auth;
    try_files
      $uri
      $uri/index$lang_suffix.html
      =404;
    error_page 404 = @samizdat;
    error_page 405 = @samizdat;
    set $cors '';
    if ($http_origin ~* (https?://.*\.fakenews\.com?(:[0-9]+)?$)) { set $cors 'on'; }
    if ($request_method = OPTIONS) { set $cors "${cors}_options"; }
    if ($cors = 'on_options') {
      add_header 'Content-Length' 0;
      add_header 'Content-Type' 'text/plain; charset=utf-8';
      add_header 'Access-Control-Allow-Origin' "$http_origin";
      add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
      add_header 'Access-Control-Allow-Headers' 'Origin,X-Requested-With,Content-Type,Accept';
      return 204;
    }
    if ($cors = 'on') {
      add_header 'Access-Control-Allow-Origin' "$http_origin";
      add_header 'Access-Control-Allow-Credentials' 'true';
      add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, PATCH';
      add_header 'Access-Control-Allow-Headers' 'Accept,Accept-Encoding,Accept-Language,Authorization,Authority,Cache-Control,Content-Type,Cookie,DNT,If-Modified-Since,Keep-Alive,Origin,User-Agent,X-Requested-With,Referer,Upgrade-Insecure-Requests,Path,Scheme,Method,Sec-Fetch-Site,ETag,Sec-Fetch-Dest,Sec-Fetch-Mode,Pragma,Sec-Fetch-User,TE,Sec-GPC,sec-ch-ua,sec-ch-ua-mobile,sec-ch-ua-platform';
      add_header 'Access-Control-Expose-Headers' 'Authorization';
      add_header 'Access-Control-Expose-Headers' 'Cookie';
    }
  }
  location @samizdat {
    proxy_pass http://samizdat;
    proxy_set_header Host $host;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection "upgrade";
    gzip on;
    gzip_vary on;
  }
  location ~* \.(?:mov|mp4|mp3|woff)$ {
    expires 365d;
    add_header Pragma public;
    add_header Cache-Control "public";
    add_header Cache-Control max-age=31536000;
    gzip off;
    gzip_static off;
  }
  location ~* \.(?:jpe?g|png|gif|svg|pdf|woff|webp)$ {
    expires 365d;
    add_header Pragma public;
    add_header Cache-Control "public";
    add_header Cache-Control max-age=31536000;
    gzip off;
    gzip_static off;
    gzip_vary off;
    error_page 404 = @samizdat;
  }
  location ~* \.(ico)$ {
    expires 365d;
    add_header Pragma public;
    add_header Cache-Control "public";
    add_header Cache-Control max-age=31536000;
    add_header Vary Accept-Encoding;
    log_not_found off;
    log_subrequest off;
    access_log off;
    gunzip on;
    gzip_static always;
    gzip off;
  }
  location ~* \.(css|js)$ {
    expires 365d;
    add_header Pragma public;
    add_header Cache-Control "public";
    add_header Vary Accept-Encoding;
    gzip off;
    gzip_static always;
    gunzip on;
    #gzip_vary on;
    gzip_types text/css application/x-javascript text/xml text/javascript application/javascript;
  }
  location /minitri.flg {
    log_not_found off;
    log_subrequest off;
    access_log off;
  }
}